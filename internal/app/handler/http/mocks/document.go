// Code generated by MockGen. DO NOT EDIT.
// Source: document.go
//
// Generated by this command:
//
//	mockgen -source=document.go -destination=./mocks/document.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	domain "web-studio-backend/internal/app/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockDocumentService is a mock of DocumentService interface.
type MockDocumentService struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentServiceMockRecorder
}

// MockDocumentServiceMockRecorder is the mock recorder for MockDocumentService.
type MockDocumentServiceMockRecorder struct {
	mock *MockDocumentService
}

// NewMockDocumentService creates a new mock instance.
func NewMockDocumentService(ctrl *gomock.Controller) *MockDocumentService {
	mock := &MockDocumentService{ctrl: ctrl}
	mock.recorder = &MockDocumentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentService) EXPECT() *MockDocumentServiceMockRecorder {
	return m.recorder
}

// AddDocumentToProject mocks base method.
func (m *MockDocumentService) AddDocumentToProject(ctx context.Context, doc *domain.Document, projectID int32) (*domain.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocumentToProject", ctx, doc, projectID)
	ret0, _ := ret[0].(*domain.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDocumentToProject indicates an expected call of AddDocumentToProject.
func (mr *MockDocumentServiceMockRecorder) AddDocumentToProject(ctx, doc, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocumentToProject", reflect.TypeOf((*MockDocumentService)(nil).AddDocumentToProject), ctx, doc, projectID)
}

// DeleteDocumentFromProject mocks base method.
func (m *MockDocumentService) DeleteDocumentFromProject(ctx context.Context, docID, projectID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocumentFromProject", ctx, docID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDocumentFromProject indicates an expected call of DeleteDocumentFromProject.
func (mr *MockDocumentServiceMockRecorder) DeleteDocumentFromProject(ctx, docID, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentFromProject", reflect.TypeOf((*MockDocumentService)(nil).DeleteDocumentFromProject), ctx, docID, projectID)
}

// GetDocument mocks base method.
func (m *MockDocumentService) GetDocument(ctx context.Context, id int32) (*domain.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", ctx, id)
	ret0, _ := ret[0].(*domain.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockDocumentServiceMockRecorder) GetDocument(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockDocumentService)(nil).GetDocument), ctx, id)
}

// GetProjectDocuments mocks base method.
func (m *MockDocumentService) GetProjectDocuments(ctx context.Context, id int32) ([]domain.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectDocuments", ctx, id)
	ret0, _ := ret[0].([]domain.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectDocuments indicates an expected call of GetProjectDocuments.
func (mr *MockDocumentServiceMockRecorder) GetProjectDocuments(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDocuments", reflect.TypeOf((*MockDocumentService)(nil).GetProjectDocuments), ctx, id)
}
