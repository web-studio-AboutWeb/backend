// Code generated by MockGen. DO NOT EDIT.
// Source: project.go
//
// Generated by this command:
//
//	mockgen -source=project.go -destination=./mocks/project.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	domain "web-studio-backend/internal/app/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// AddParticipant mocks base method.
func (m *MockProjectRepository) AddParticipant(ctx context.Context, participant *domain.ProjectParticipant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParticipant", ctx, participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddParticipant indicates an expected call of AddParticipant.
func (mr *MockProjectRepositoryMockRecorder) AddParticipant(ctx, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParticipant", reflect.TypeOf((*MockProjectRepository)(nil).AddParticipant), ctx, participant)
}

// CreateProject mocks base method.
func (m *MockProjectRepository) CreateProject(ctx context.Context, project *domain.Project) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, project)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectRepositoryMockRecorder) CreateProject(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectRepository)(nil).CreateProject), ctx, project)
}

// DisableProject mocks base method.
func (m *MockProjectRepository) DisableProject(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableProject", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableProject indicates an expected call of DisableProject.
func (mr *MockProjectRepositoryMockRecorder) DisableProject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableProject", reflect.TypeOf((*MockProjectRepository)(nil).DisableProject), ctx, id)
}

// GetActiveProject mocks base method.
func (m *MockProjectRepository) GetActiveProject(ctx context.Context, id int32) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProject", ctx, id)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProject indicates an expected call of GetActiveProject.
func (mr *MockProjectRepositoryMockRecorder) GetActiveProject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProject", reflect.TypeOf((*MockProjectRepository)(nil).GetActiveProject), ctx, id)
}

// GetParticipant mocks base method.
func (m *MockProjectRepository) GetParticipant(ctx context.Context, participantID, projectID int32) (*domain.ProjectParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipant", ctx, participantID, projectID)
	ret0, _ := ret[0].(*domain.ProjectParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipant indicates an expected call of GetParticipant.
func (mr *MockProjectRepositoryMockRecorder) GetParticipant(ctx, participantID, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipant", reflect.TypeOf((*MockProjectRepository)(nil).GetParticipant), ctx, participantID, projectID)
}

// GetParticipants mocks base method.
func (m *MockProjectRepository) GetParticipants(ctx context.Context, projectID int32) ([]domain.ProjectParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipants", ctx, projectID)
	ret0, _ := ret[0].([]domain.ProjectParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipants indicates an expected call of GetParticipants.
func (mr *MockProjectRepositoryMockRecorder) GetParticipants(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipants", reflect.TypeOf((*MockProjectRepository)(nil).GetParticipants), ctx, projectID)
}

// GetProject mocks base method.
func (m *MockProjectRepository) GetProject(ctx context.Context, id int32) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, id)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectRepositoryMockRecorder) GetProject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectRepository)(nil).GetProject), ctx, id)
}

// GetProjects mocks base method.
func (m *MockProjectRepository) GetProjects(ctx context.Context) ([]domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx)
	ret0, _ := ret[0].([]domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockProjectRepositoryMockRecorder) GetProjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockProjectRepository)(nil).GetProjects), ctx)
}

// RemoveParticipant mocks base method.
func (m *MockProjectRepository) RemoveParticipant(ctx context.Context, participantID, projectID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveParticipant", ctx, participantID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveParticipant indicates an expected call of RemoveParticipant.
func (mr *MockProjectRepositoryMockRecorder) RemoveParticipant(ctx, participantID, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveParticipant", reflect.TypeOf((*MockProjectRepository)(nil).RemoveParticipant), ctx, participantID, projectID)
}

// UpdateParticipant mocks base method.
func (m *MockProjectRepository) UpdateParticipant(ctx context.Context, participant *domain.ProjectParticipant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParticipant", ctx, participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateParticipant indicates an expected call of UpdateParticipant.
func (mr *MockProjectRepositoryMockRecorder) UpdateParticipant(ctx, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParticipant", reflect.TypeOf((*MockProjectRepository)(nil).UpdateParticipant), ctx, participant)
}

// UpdateProject mocks base method.
func (m *MockProjectRepository) UpdateProject(ctx context.Context, project *domain.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectRepositoryMockRecorder) UpdateProject(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectRepository)(nil).UpdateProject), ctx, project)
}
